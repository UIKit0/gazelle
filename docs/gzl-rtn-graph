#!/usr/bin/env lua

require "bootstrap/rtn"
require "fa_algorithms"

function escape(str)
  return str:gsub("[\"\\]", "\\%1")
end

grammar = parse_grammar(CharStream:new(io.stdin:read("*a")))
if grammar.rtns:count() ~= 1 then
  error("This filter can only deal with grammars that have a single nonterminal")
end
for _nonterm, _rtn in grammar.rtns:each() do
  nonterm = _nonterm
  rtn = _rtn
end

rtn = hopcroft_minimize(nfa_to_dfa(rtn))

outfile = io.popen("dot -Tpng -o " .. arg[1], "w")

outfile:write("digraph untitled {\n")
outfile:write("rankdir=LR;\n")
outfile:write("fontsize=10;\n")
for state in each(rtn:states()) do
  peripheries = 1
  extra_label = ""
  if state.final then peripheries = 2 end
  if rtn.start == state then extra_label = "Start" end
  outfile:write(string.format('  "%s" [label="%s" peripheries=%d]\n', tostring(state), extra_label, peripheries))
  for edge_val, target_state in state:transitions() do
    if fa.is_nonterm(edge_val) then
      outfile:write(string.format('  "%s" -> "%s" [label="<%s>"]\n', tostring(state), tostring(target_state), escape(edge_val.name)))
    else
      if grammar.attributes.regex_text[edge_val] then
        edge_val = "/" .. grammar.attributes.regex_text[edge_val] .. "/"
      end
      outfile:write(string.format('  "%s" -> "%s" [label="%s"]\n', tostring(state), tostring(target_state), escape(edge_val)))
    end
  end
end
outfile:write("}\n")
outfile:close()

print(" ")

