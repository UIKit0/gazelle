
Gazelle: a system for building fast, reusable parsers

<http://www.reverberate.org/gazelle/>

PRELIMINARY WARNING
===================

This is experimental, immature software.  A few things work, but a lot of
things don't.  And everything is subject to change: the APIs, the grammar
language, everything.

Still with me?  Great. :)

BUILDING
========

You need to have Lua installed to do anything interesting.  The C runtime
doesn't need Lua, but without Lua you can't compile any grammars.

Gazelle should build out-of-the-box on UNIX-like systems if Lua is installed.
Ubuntu Linux and Mac OS X are tested.  Just type make:

$ make

To build the documentation, you need to have asciidoc installed, as well
as graphviz if you want to see the graphics.

$ make doc

Alternatively you can just read the manual on the Gazelle website.

ROADMAP OF THE SOURCE
=====================

compiler/
  what parses the grammar, turns it into state machines, and dumps into bytcode
compiler/bootstrap
  compiler code that will not be needed once Gazelle is self-hosting
lang_ext/
  wrappers around the C runtime, for high-level languages (currently only Lua)
runtime/
  the tiny, fast, small-memory-footprint C runtime that actually does the parsing
sketches/
  code that is either half-written or for debugging-only
tests/
  unit tests (not very many at the moment)
utilities/
  command-line utilities for doing useful things

CONTACT
=======

For questions, comments, etc. please post to the gazelle-users group.  I read
and respond to posts on this list.
http://groups.google.com/group/gazelle-users

If you need to contact me directly, I am:
Joshua Haberman <joshua@reverberate.org>

